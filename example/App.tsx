import React, {FC, useCallback, useEffect, useState, useMemo} from 'react';
import {
  SafeAreaView,
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  FlatList,
  ActivityIndicator,
  Alert,
  Platform,
  Button,
  ScrollView,
} from 'react-native';

// ===== 1. –ö–û–†–†–ï–ö–¢–ù–´–ï –ò–ú–ü–û–†–¢–´ –ò–ó –ë–ò–ë–õ–ò–û–¢–ï–ö–ò =====
import {
  RealTimeClient,
  useRealtime,
  useSpeechActivity,
  useMicrophoneActivity,
  createSpeechActivityMiddleware,
  speechActivityStore,
} from '@react-native-openai-realtime';

import type {
  MiddlewareCtx,
  ExtendedChatMsg,
  IncomingMiddleware,
  OutgoingMiddleware,
} from '@react-native-openai-realtime/types';

// ====================================================================================
// 2. –ë–ï–ó–û–ü–ê–°–ù–´–ô TOKEN PROVIDER
// ====================================================================================

const tokenProvider = async (): Promise<string> => {
  console.log('üîë [tokenProvider] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —ç—Ñ–µ–º–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω —Å –±—ç–∫–µ–Ω–¥–∞...');
  try {
    const backendUrl = 'http://localhost:3000/api/openai/ephemeral-token';
    const userAuthToken = 'YOUR_APP_USER_JWT_OR_SESSION_TOKEN';

    const response = await fetch(backendUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${userAuthToken}`,
      },
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
    }
    const {token} = await response.json();
    if (!token) {
      throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω');
    }

    console.log('‚úÖ [tokenProvider] –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.');
    return token;
  } catch (error) {
    const errorMessage = (error as Error).message;
    console.error(
      '‚ùå [tokenProvider] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:',
      errorMessage,
    );
    Alert.alert(
      '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏',
      `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω.\n\n${errorMessage}`,
    );
    throw error;
  }
};

// ====================================================================================
// 3. MIDDLEWARE: –ì–ò–ë–ö–ò–ô –ü–ï–†–ï–•–í–ê–¢ –ò –ú–û–î–ò–§–ò–ö–ê–¶–ò–Ø
// ====================================================================================

const createIncomingMiddleware = (
  log: (msg: string) => void,
): IncomingMiddleware[] => [
  createSpeechActivityMiddleware(speechActivityStore),
  ({event}: MiddlewareCtx) => {
    log(`[IN] ${event.type}`);
    if (
      event.type === 'response.audio_transcript.delta' &&
      !(event.delta || '').trim()
    ) {
      return 'stop';
    }
  },
];

const createOutgoingMiddleware = (
  log: (msg: string) => void,
): OutgoingMiddleware[] => [
  (event: any) => {
    log(`[OUT] ${event.type}`);
    return {
      ...event,
      client_metadata: {appVersion: '1.0.0', platform: Platform.OS},
    };
  },
];

// ====================================================================================
// 4. UI –ö–û–ú–ü–û–ù–ï–ù–¢–´ –î–õ–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò
// ====================================================================================

const MicrophoneVisualizer: FC = () => {
  const mic = useMicrophoneActivity({mode: 'auto', pollInterval: 100});
  const bars = useMemo(
    () =>
      Array.from({length: 20}, (_, i) => {
        const isActive = mic.level >= (i + 1) / 20;
        return (
          <View
            key={i}
            style={[
              styles.micBar,
              // eslint-disable-next-line react-native/no-inline-styles
              {
                height: 10 + i * 1.5,
                backgroundColor: isActive
                  ? `hsl(${120 - i * 6}, 70%, 50%)`
                  : '#e9ecef',
              },
            ]}
          />
        );
      }),
    [mic.level],
  );
  return (
    <View style={styles.micVisualizer}>
      <Text style={styles.micTitle}>
        {mic.isMicActive ? 'üé§ –ó–∞–ø–∏—Å—å...' : 'üîá –¢–∏—à–∏–Ω–∞'}
      </Text>
      <View style={styles.micBars}>{bars}</View>
    </View>
  );
};

const ChatMessage: FC<{item: ExtendedChatMsg}> = ({item}) => {
  if (item.type === 'ui' && item.kind === 'weather_card') {
    return (
      <View style={[styles.bubble, styles.weatherCard]}>
        <Text style={styles.weatherIcon}>‚òÄÔ∏è</Text>
        <View>
          <Text style={styles.weatherCity}>{item.payload.city}</Text>
          <Text style={styles.weatherTemp}>{item.payload.temperature}</Text>
        </View>
      </View>
    );
  }
  const isUser = item.role === 'user';
  return (
    <View
      style={[
        styles.bubble,
        isUser ? styles.userBubble : styles.assistantBubble,
      ]}>
      <Text style={isUser ? styles.userText : styles.assistantText}>
        {item.text}
      </Text>
      {item.status === 'streaming' && (
        // eslint-disable-next-line react-native/no-inline-styles
        <ActivityIndicator size="small" style={{marginLeft: 8}} />
      )}
    </View>
  );
};

const MainScreen: FC<{addLog: (msg: string) => void}> = ({addLog}) => {
  const {
    client,
    isConnected,
    isConnecting,
    chat,
    connect,
    disconnect,
    sendResponse,
    updateSession,
    addMessage,
  } = useRealtime();
  const {isUserSpeaking, isAssistantSpeaking} = useSpeechActivity();

  useEffect(() => {
    if (!client) {
      return;
    }
    const unsub = client.on('tool:call_done', ({name, args}) => {
      addLog(`üîß Tool executed: ${name}`);
      if (name === 'get_weather') {
        addMessage({type: 'ui', kind: 'weather_card', payload: args});
      }
    });
    return unsub;
  }, [client, addMessage, addLog]);

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>Realtime Demo</Text>
        <TouchableOpacity
          style={[styles.connectButton, isConnected && styles.connectedButton]}
          onPress={() => (isConnected ? disconnect() : connect())}
          disabled={isConnecting}>
          <Text style={styles.connectButtonText}>
            {isConnecting ? '...' : isConnected ? 'Online' : 'Offline'}
          </Text>
        </TouchableOpacity>
      </View>
      <View style={styles.activityIndicators}>
        <Text
          style={[
            styles.indicatorText,
            isUserSpeaking && styles.activeIndicator,
          ]}>
          User Speaking
        </Text>
        <Text
          style={[
            styles.indicatorText,
            isAssistantSpeaking && styles.activeIndicator,
          ]}>
          Assistant Speaking
        </Text>
      </View>
      <MicrophoneVisualizer />
      <FlatList
        style={styles.chatList}
        data={chat}
        renderItem={ChatMessage}
        keyExtractor={item => item.id}
        inverted
      />
      {isConnected && (
        <ScrollView
          horizontal
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={styles.controls}>
          <Button
            title="–ü–æ–≥–æ–¥–∞"
            onPress={() => sendResponse({instructions: '–ü–æ–≥–æ–¥–∞ –≤ –ü–∞—Ä–∏–∂–µ'})}
          />
          <Button
            title="–ì–æ–ª–æ—Å"
            onPress={() => updateSession({voice: 'onyx'})}
          />
          <Button
            title="Mute"
            onPress={() =>
              client
                ?.getLocalStream()
                ?.getAudioTracks()
                .forEach(t => (t.enabled = false))
            }
          />
          <Button
            title="Unmute"
            onPress={() =>
              client
                ?.getLocalStream()
                ?.getAudioTracks()
                .forEach(t => (t.enabled = true))
            }
          />
        </ScrollView>
      )}
    </View>
  );
};

// ====================================================================================
// 5. –ö–û–†–ù–ï–í–û–ô –ö–û–ú–ü–û–ù–ï–ù–¢ –° –ü–û–õ–ù–û–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ï–ô
// ====================================================================================

const TheUltimateExample: FC = () => {
  const [_, setLogs] = useState<string[]>([]);
  const addLog = useCallback((msg: string) => {
    setLogs(prev => [
      `[${new Date().toLocaleTimeString()}] ${msg}`,
      ...prev.slice(0, 100),
    ]);
  }, []);

  const memoizedIncomingMiddleware = useMemo(
    () => createIncomingMiddleware(addLog),
    [addLog],
  );
  const memoizedOutgoingMiddleware = useMemo(
    () => createOutgoingMiddleware(addLog),
    [addLog],
  );

  return (
    <SafeAreaView style={styles.safeArea}>
      <RealTimeClient
        // ----- 1. –ë–ê–ó–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò -----
        tokenProvider={tokenProvider}
        autoConnect={false}
        attachChat={true}
        // ----- 2. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø WEBRTC -----
        webrtc={{
          iceServers: [{urls: 'stun:stun.l.google.com:19302'}],
          offerOptions: {offerToReceiveAudio: true},
        }}
        // ----- 3. –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –°–ï–°–°–ò–ò OPENAI -----
        session={{
          model: 'gpt-4o-realtime-preview-2024-12-17',
          voice: 'alloy',
          language: 'ru',
          tools: [
            // ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø "–ü–õ–û–°–ö–ê–Ø" –°–•–ï–ú–ê TOOLS
            {
              type: 'function',
              name: 'get_weather',
              description: '–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.',
              parameters: {
                type: 'object',
                properties: {
                  city: {type: 'string'},
                  temperature: {type: 'string'},
                  condition: {type: 'string'},
                },
                required: ['city', 'temperature', 'condition'],
              },
            },
          ],
        }}
        autoSessionUpdate={true}
        // ----- 4. –ü–û–í–ï–î–ï–ù–ò–ï –ß–ê–¢–ê -----
        chatEnabled={true}
        chatUserAddOnDelta={true}
        chatAssistantAddOnDelta={true}
        policyIsMeaningfulText={text => text.trim().length > 1}
        chatIsMeaningfulText={text => text.trim().length > 0}
        // ----- 5. –•–£–ö–ò –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê -----
        onOpen={dc => addLog(`‚úÖ [onOpen] DataChannel "${dc.label}" –æ—Ç–∫—Ä—ã—Ç.`)}
        onEvent={evt => addLog(`[onEvent] –°–æ–±—ã—Ç–∏–µ –ø–æ—Å–ª–µ MW: ${evt.type}`)}
        onError={e => {
          addLog(`‚ùå [onError] ${e.stage}: ${e.error.message}`);
          Alert.alert('–û—à–∏–±–∫–∞', e.error.message);
        }}
        onToolCall={async ({name, args}) => {
          addLog(`üîß [onToolCall] –í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: ${name}`);
          if (name === 'get_weather') {
            await new Promise(r => setTimeout(r, 500)); // –°–∏–º—É–ª—è—Ü–∏—è API
            return {
              city: args.city,
              temperature: '25¬∞C',
              condition: '–°–æ–ª–Ω–µ—á–Ω–æ',
            };
          }
        }}
        // ----- 6. MIDDLEWARE -----
        incomingMiddleware={memoizedIncomingMiddleware}
        outgoingMiddleware={memoizedOutgoingMiddleware}>
        <MainScreen addLog={addLog} />
      </RealTimeClient>
    </SafeAreaView>
  );
};

export default TheUltimateExample;

// ====================================================================================
// 6. –°–¢–ò–õ–ò –ò –§–ò–ù–ê–õ–¨–ù–ê–Ø –®–ü–ê–†–ì–ê–õ–ö–ê
// ====================================================================================
const styles = StyleSheet.create({
  safeArea: {flex: 1, backgroundColor: '#000'},
  container: {flex: 1, backgroundColor: '#f0f2f5'},
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderColor: '#e0e0e0',
  },
  title: {fontSize: 20, fontWeight: 'bold'},
  connectButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: '#dc3545',
  },
  connectedButton: {backgroundColor: '#28a745'},
  connectButtonText: {color: '#fff', fontWeight: '600'},
  activityIndicators: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    padding: 10,
    backgroundColor: '#fff',
  },
  indicatorText: {fontSize: 14},
  activeIndicator: {color: '#28a745', fontWeight: 'bold'},
  micVisualizer: {
    padding: 12,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    margin: 10,
  },
  micTitle: {textAlign: 'center', marginBottom: 8, fontWeight: '600'},
  micBars: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'flex-end',
    height: 40,
  },
  micBar: {width: 4, marginHorizontal: 1, borderRadius: 2},
  chatList: {flex: 1},
  bubble: {
    padding: 12,
    borderRadius: 18,
    marginBottom: 8,
    maxWidth: '80%',
    flexDirection: 'row',
    alignItems: 'center',
  },
  userBubble: {alignSelf: 'flex-end', backgroundColor: '#007AFF'},
  assistantBubble: {alignSelf: 'flex-start', backgroundColor: '#E5E5EA'},
  userText: {color: '#FFF'},
  assistantText: {color: '#000'},
  weatherCard: {
    alignSelf: 'center',
    backgroundColor: '#d1ecf1',
    borderWidth: 1,
    borderColor: '#bee5eb',
    padding: 15,
    borderRadius: 10,
    flexDirection: 'row',
    alignItems: 'center',
  },
  weatherIcon: {fontSize: 32, marginRight: 12},
  weatherCity: {fontSize: 18, fontWeight: 'bold'},
  weatherTemp: {fontSize: 24},
  controls: {
    flexDirection: 'row',
    justifyContent: 'center',
    gap: 8,
    padding: 10,
    borderTopWidth: 1,
    borderColor: '#e0e0e0',
    backgroundColor: '#fff',
  },
});

/*
// ====================================================================================
// 7. –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ –û–ë–†–ê–ë–û–¢–ö–ò –°–û–ë–´–¢–ò–ô (–®–ü–ê–†–ì–ê–õ–ö–ê)
// ====================================================================================

// --- –í–•–û–î–Ø–©–ï–ï –°–û–ë–´–¢–ò–ï (–æ—Ç OpenAI –∫ –≤–∞–º) ---
// 1. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ DataChannel
//     |
//     v
// 2. `incomingMiddleware` (–í–∞—à –∫–æ–¥): –ü–µ—Ä–≤—ã–π –Ω–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç. –ú–û–ñ–ï–¢ –∏–∑–º–µ–Ω–∏—Ç—å/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.
//     |
//     v
// 3. `onEvent` —Ö—É–∫ (–í–∞—à –∫–æ–¥): –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ. –î–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è/–∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
//     |
//     v
// 4. –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Ä–æ—É—Ç–µ—Ä –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: –ü–∞—Ä—Å–∏—Ç —Ç–∏–ø, –≤—ã–∑—ã–≤–∞–µ—Ç `onToolCall` –∏ –¥—Ä—É–≥–∏–µ `on...` —Ö—É–∫–∏.
//     |
//     v
// 5. –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π `ChatStore`: –û–±–Ω–æ–≤–ª—è–µ—Ç `chat` –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏–π –æ—Ç —Ä–æ—É—Ç–µ—Ä–∞.
//     |
//     v
// 6. –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ `client.on(...)`: –†–µ–∞–∫—Ü–∏—è UI –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.

// --- –¢–†–ò –£–†–û–í–ù–Ø –û–ë–†–ê–ë–û–¢–ö–ò ---
// 1. Middleware: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å. –î–ª—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏.
// 2. Hooks (`on...`): –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å. –î–ª—è "–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è" —Å–æ–±—ã—Ç–∏–π –∏ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ (`onToolCall`).
// 3. `client.on(...)`: –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å. –î–ª—è —Ä–µ–∞–∫—Ü–∏–∏ UI –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è.
*/
